---
import { Picture } from "astro:assets";
//import { readFileSync } from "node:fs";
//import { parse } from "yaml";
import YukinaConfig from "../../yukina.config";

import elmoImg from "../assets/photos/elmo.jpg";
import catBox from "../assets/photos/catBox.jpg";
import ferryFun from "../assets/photos/ferryFun.jpg";
import christmasJump from "../assets/photos/christmasJump.jpg";
import portoHill from "../assets/photos/portoHill.jpg";
import glasses from "../assets/photos/glasses.jpg";
import science from "../assets/photos/science.jpg";

import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";

export interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  slug?: string;
}
const { title, subTitle, bannerImage, slug } = Astro.props;

const hasTitle = title !== undefined || subTitle !== undefined;
const hasHeaderImg = bannerImage !== undefined || slug !== undefined;

interface CarouselImg {
  src: ImageMetadata;
  objectPosition?: string;
  alt: string;
}
let carouselImgsList = [] as CarouselImg[];
if (!hasHeaderImg) {
  //console.log("No header image specified, loading carousel images...");
  //const carouselImgs = readFileSync("data/carousel_imgs.yaml", "utf-8");
  //carouselImgsList = parse(carouselImgs) as string[];
  carouselImgsList = [
    {
      src: ferryFun,
      objectPosition: "center 34%",
      alt: "John and family enjoying the ferry to SF",
    },
    {
      src: elmoImg,
      objectPosition: "center center",
      alt: "John and daughter playing with puppets",
    },
    {
      src: glasses,
      objectPosition: "center center",
      alt: "John and family making silly faces with sunglasses",
    },
    {
      src: science,
      objectPosition: "center center",
      alt: "John and daughter with lab goggles on",
    },
    //{
    //  src: catBox,
    //  objectPosition: 'left center'
    //},
    //{
    //  src: christmasJump,
    //  objectPosition: 'center top'
    //},
    //{
    //  src: portoHill,
    //  objectPosition: 'center center'
    //},
  ];
}

// let carouselImgsList = YukinaConfig.banners;

const carouselAnimationTime = `${carouselImgsList.length * 6}s`;
//<!--class=" left-1/2 top-1/2 w-4/5 -translate-x-1/2 -translate-y-1/2 lg:w-3/4"-->
---

<div id="banner" class="banner onload-animation-fade-in">
  <div class="transition-main banner-inner h-full w-full">
    {
      !hasHeaderImg && (
        <div class="carousel">
          <div class="carousel_imgs">
            <div
              style={{
                width: "100%",
                height: "100%",
                position: "absolute",
                backgroundColor: "rgb(0, 0, 0)",
                opacity: 0.529297,
              }}
            />
            {carouselImgsList.map((img, index) => (
              <Picture
                alt={img.alt}
                formats={["avif", "webp"]}
                src={img.src}
                class="item lozad"
                style={{
                  animationDelay: `${index * 6}s`,
                  objectPosition: img.objectPosition,
                  filter: "brightness(0.592)",
                }}
              />
            ))}
          </div>
        </div>
      )
    }
    {
      hasHeaderImg && (
        <div class="cover">
          <img
            class="item lozad"
            data-src={bannerImage ?? GetCoverURLForUnspecifiedEntry(slug ?? "")}
            alt="PostCoverr"
          />
        </div>
      )
    }
    <div class="relative h-[95%] w-full">
      <div class="titleWrapper">
        <div class="flex flex-col">
          <h1
            class:list={[hasTitle ? "title-normal" : "title-index"]}
            class="title"
          >
            {YukinaConfig.title || title}
          </h1>
          <h2 class="subtitle">{subTitle ?? YukinaConfig.subTitle}</h2>
        </div>
      </div>
    </div>
  </div>
  <div class="waves" id="header-waves">
    <svg
      class="waves"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        >
        </path>
      </defs>
      <g class="parallax">
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="0"
          class="opacity-25"
          style={{ animationDelay: "-2s", animationDuration: "7s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="3"
          class="opacity-50"
          style={{ animationDelay: "-3s", animationDuration: "10s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="5"
          class="opacity-75"
          style={{ animationDelay: "-4s", animationDuration: "13s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="7"
          style={{ animationDelay: "-5s", animationDuration: "20s" }}></use>
      </g>
    </svg>
  </div>
</div>

<script>
  const styleElement = document.createElement("style");
  const carouselImgs = document.getElementsByClassName("carousel_imgs")[0];
  const carouselImgsCount = carouselImgs?.children.length ?? 0;

  const carouselAnimation = `
  @keyframes carousel-animation {
    0% {
      opacity: 0;
      transform: scale(1);
    }
    3% {
      opacity: 1;
    }
    8% {
      opacity: 1;
      animation-timing-function: ease-out;
    }
    ${100 / carouselImgsCount}% {
      opacity: 1;
    }
    ${100 / carouselImgsCount + 50 / carouselImgsCount}% {
      opacity: 0;
      animation-timing-function: ease-out;
    }
    100% {
      opacity: 0;
      transform: scale(2);
    }
  }
  `;
  styleElement.textContent = carouselAnimation;
  let bannerElement = document.getElementById("banner");
  if (bannerElement && !bannerElement.querySelector("style"))
    bannerElement.appendChild(styleElement);
</script>

<style define:vars={{ carouselAnimationTime }}>
  .banner {
    @apply relative opacity-100;
    overflow: hidden;
  }

  .carousel {
    @apply absolute left-0 top-0 -z-10 block h-[calc(var(--banner-height)*3/4)] w-full overflow-hidden bg-white lg:h-[var(--banner-height)];
    animation-fill-mode: forwards;
    height: 100%;
  }

  .carousel::before {
    @apply absolute left-0 top-0 z-10 block h-full w-full bg-black/25 transition-all content-[''];
    @apply dark:bg-black/30;
  }

  .carousel .item {
    @apply absolute left-0 top-0 z-0 h-full w-full origin-center bg-cover bg-center bg-no-repeat opacity-0;
    animation: carousel-animation var(--carouselAnimationTime) linear infinite
      0s;
    backface-visibility: hidden;
    transform-style: preserve-3d;
    object-fit: cover;
  }

  .cover {
    @apply absolute left-0 top-0 z-0 block w-full overflow-hidden bg-white;

    height: 100%;
    filter: brightness(0.592);
    z-index: -10;
  }

  .cover::before {
    @apply absolute left-0 top-0 z-10 block h-full w-full bg-black/25 transition-all content-[''];
    @apply dark:bg-black/30;
  }

  .cover .item {
    @apply h-full w-full object-cover;
  }

  .title {
    @apply mt-8 text-center font-bold text-[var(--title-color)] drop-shadow-lg lg:mt-1;
    font-family: var(--title-font);
  }

  .title-index {
    @apply mb-0 text-6xl leading-[5rem] lg:mb-1 lg:text-8xl;
  }

  .title-normal {
    @apply mb-1 text-3xl lg:text-5xl;
  }

  .subtitle {
    @apply text-center text-xl text-[var(--subtitle-color)] drop-shadow-md lg:text-3xl;
    font-family: var(--subtitle-font);
  }

  .waves {
    @apply -bottom-[1px] h-[10vh] max-h-[9.375rem] min-h-[3.125rem] w-full;
    @apply md:h-[var(--wave-height)];
  }

  .waves > .parallax use {
    @apply fill-[var(--background-color)];
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }

  @keyframes wave {
    0% {
      transform: translate3d(-90px, 0, 0);
    }
    100% {
      transform: translate3d(85px, 0, 0);
    }
  }

  @keyframes banner-onload-animation {
    0% {
      opacity: 0;
      height: calc(var(--banner-height) + 4rem);
    }
    100% {
      opacity: 1;
      height: var(--banner-height);
    }
  }
  .titleWrapper {
    margin-top: var(--nav-height);
    display: flex;
    place-content: center;
  }
  .titleWrapper > * {
    width: 80%;
    display: flex;
    place-content: center;
  }

  @media (min-width: 1024px) {
    .titleWrapper > * {
      min-height: 55vh;
    }
  }
</style>
